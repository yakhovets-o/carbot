import aiogram.utils.markdown as fmt

from datetime import datetime

from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot.keyboards.type_cars import type_car_kb
from bot.keyboards.currency_cars import cur_car_kb
from bot.db.orm_query import OrmQuery

from sqlalchemy.ext.asyncio import AsyncSession


class ParamSearch(StatesGroup):
    car = State()
    currency = State()
    min_price = State()
    max_price = State()
    tracking_date = State()


async def param_search(message: types.Message, state: FSMContext):
    await message.answer(text=fmt.hitalic('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ:'), reply_markup=type_car_kb)
    await state.set_state(ParamSearch.car)


async def car_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        return

    await state.clear()
    await message.answer(text=fmt.hitalic('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'))


async def car_message(message: types.Message):
    text = fmt.text(
        fmt.text(fmt.hitalic('–£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')),
        fmt.text(fmt.hbold('/break '), fmt.hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞')),
        sep='\n\n'
    )
    await message.answer(text=text)
    await message.delete()


async def car_choice(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(cars=True)
    if call.data == '–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(truck_cars=True)

    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ / –ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(cars=True)
        await state.update_data(truck_cars=True)

    data = await state.get_data()
    car = '–õ–µ–≥–∫–æ–µ –∞–≤—Ç–æ' if data.get("cars", False) else '–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ'
    truck_car = '–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ' if data.get("truck_cars", False) else '–õ–µ–≥–∫–æ–µ –∞–≤—Ç–æ'
    join_cars = ', '.join({car, truck_car})
    await state.update_data(join_cars=join_cars)
    data = await state.get_data()

    text = fmt.text(
        fmt.text(fmt.hitalic('–ê–≤—Ç–æ: ', data.get('join_cars'))),
        fmt.text(fmt.hbold('/break '), fmt.hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞')),
        sep='\n\n'
    )
    await call.message.answer(text=text)
    await call.message.edit_reply_markup()
    await state.set_state(ParamSearch.currency)
    await call.message.answer(text=fmt.hitalic('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.'), reply_markup=cur_car_kb)
    await call.answer()


async def currency_car(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'Usd':
        await state.update_data(currency='Usd')
    else:
        await state.update_data(currency='Br')

    data = await state.get_data()
    currency = data.get('currency')
    text = fmt.text(
        fmt.text(fmt.hitalic('–í–∞–ª—é—Ç–∞: ', currency)),
        fmt.text(fmt.hbold('/break '), fmt.hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞')),
        sep='\n\n'
    )
    await call.message.answer(text=text)
    await call.message.edit_reply_markup()
    await state.set_state(ParamSearch.min_price)
    await call.message.answer(text=fmt.hitalic('üíµ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.'))
    await call.answer()


async def car_price_start(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(price_min=int(message.text))

        await state.set_state(ParamSearch.max_price)

        await message.answer(text=fmt.hitalic('üí∏ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.'))

    else:
        await message.answer(text=fmt.hitalic('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.'))
        await message.delete()


async def car_price_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price_min = data.get('price_min')

    if not message.text.isdigit():
        await message.answer(text=fmt.hitalic('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.'))
        await message.delete()
    if message.text.isdigit() and price_min > int(message.text):
        await message.answer(text=fmt.hitalic('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–≤—ã—à–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é.'))
        await message.delete()
    if message.text.isdigit() and price_min <= int(message.text):
        await state.update_data(price_max=int(message.text))

        await state.set_state(ParamSearch.tracking_date)

        text = fmt.text(
            fmt.text(fmt.hitalic(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ  –î–î.–ú–ú.–ì–ì –ß–ß:MM '
                                 f'(–Ω–∞–ø—Ä–∏–º–µ—Ä, {datetime.now().strftime("%d.%m.%y %H:%M")})')),
            fmt.text(fmt.hbold('/break '), fmt.hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞')),
            sep='\n\n'
        )

        await message.answer(text=text)


async def car_tracking_date(message: types.Message, state: FSMContext, session: AsyncSession):
    tracking_date_str = message.text

    try:
        date = str(datetime.strptime(tracking_date_str, '%d.%m.%y %H:%M'))
    except ValueError:
        await message.answer(text=fmt.hitalic('–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'))
    else:
        await state.update_data(tracking_date=date)
        await state.update_data(user_id=message.from_user.id)

        data = await state.get_data()

        cars = data.get('join_cars')
        currency = data.get('currency')
        price_min = data.get('price_min')
        price_max = data.get('price_max')
        tracking_date = data.get("tracking_date")

        search = fmt.text(
            fmt.text(fmt.hbold('–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞: ')),
            fmt.text(fmt.hbold('–í—ã –≤—ã–±—Ä–∞–ª–∏: ')),
            fmt.text(fmt.hbold('–ê–≤—Ç–æ üöó '), fmt.hitalic(cars)),
            fmt.text(fmt.hbold('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üíµ '), fmt.hitalic(price_min, currency)),
            fmt.text(fmt.hbold('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üíµ '), fmt.hitalic(price_max, currency)),
            fmt.text(fmt.hbold('–ü–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å üìÖ '), fmt.hitalic(tracking_date)),
            sep='\n'
        )
        commands = fmt.text(
            fmt.text(fmt.hbold('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '), fmt.hitalic('/get')),
            fmt.text(fmt.hbold('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ '), fmt.hitalic('/begin')),
            fmt.text(fmt.hbold('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ '), fmt.hitalic('/break')),
            sep='\n\n'

        )
        await message.answer(text=search)
        await message.answer(text=commands)

        # User table
        await OrmQuery.add_or_update_params(session=session, data=data)
        await state.clear()
