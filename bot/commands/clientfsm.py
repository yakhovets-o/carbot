from datetime import datetime

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import types

from bot.keyboards.type_cars import type_car_kb
from bot.keyboards.currency_cars import cur_car_kb
from bot.db.orm_query import add_params

from sqlalchemy.ext.asyncio import AsyncSession


class ParamSearch(StatesGroup):
    car = State()
    currency = State()
    min_price = State()
    max_price = State()
    tracking_date = State()
    update_period_min = State()


async def param_search(message: types.Message, state: FSMContext):
    await message.answer(text='<b><i>–≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ:</i></b>', reply_markup=type_car_kb)
    await state.set_state(ParamSearch.car)


async def car_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        return

    await state.clear()
    await message.answer(text='<i>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</i>')


async def car_message(message: types.Message):
    await message.answer(text=f'üî® <b><i>–£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n'
                              f'–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</i></b> /break')
    await message.delete()


async def car_choice(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(cars=True)
    if call.data == '–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(truck_cars=True)

    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ / –ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        await state.update_data(cars=True)
        await state.update_data(truck_cars=True)
    data = await state.get_data()
    cars = '–í—ã–±—Ä–∞–Ω–æ' if data.get("cars", False) else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    truck_cars = '–í—ã–±—Ä–∞–Ω–æ' if data.get("truck_cars", False) else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'

    await call.message.answer(text=f'<i>–õ–µ–≥–∫–æ–≤–æ–µ –∞–≤—Ç–æ - {cars}\n–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ - {truck_cars}.</i>\n\n'
                                   f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')
    await call.message.edit_reply_markup()
    await state.set_state(ParamSearch.currency)
    await call.message.answer(text=f'üíµ <i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.</i>', reply_markup=cur_car_kb)
    await call.answer()


async def currency_car(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'Usd':
        await state.update_data(currency='Usd')
    else:
        await state.update_data(currency='Br')

    data = await state.get_data()
    currency = data.get('currency')
    await call.message.answer(text=f'<i>–í–∞–ª—é—Ç–∞: {currency}</i>\n\n'
                                   f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')
    await call.message.edit_reply_markup()
    await state.set_state(ParamSearch.min_price)
    await call.message.answer(text=f'üíµ <i>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.</i>')
    await call.answer()


async def car_price_start(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(price_min=int(message.text))

        await state.set_state(ParamSearch.max_price)

        await message.answer(text=f'üí∏ <i>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.</i>\n\n'
                                  f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')

    else:
        await message.answer(text=f'<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>')
        await message.delete()


async def car_price_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price_min = data.get('price_min')

    if not message.text.isdigit():
        await message.answer(text=f'<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>')
        await message.delete()
    if message.text.isdigit() and price_min > int(message.text):
        await message.answer(text=f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–≤—ã—à–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é.</b>')
        await message.delete()
    if message.text.isdigit() and price_min <= int(message.text):
        await state.update_data(price_max=int(message.text))

        await state.set_state(ParamSearch.tracking_date)

        await message.answer(
            text=f'üìÖ<b><i>–í–≤–µ–¥—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ  –î–î.–ú–ú.–ì–ì –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, {datetime.now().strftime("%d.%m.%y %H:%M")})</i></b>\n\n'
                 f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')


async def car_tracking_date(message: types.Message, state: FSMContext):
    tracking_date_str = message.text

    try:
        date = str(datetime.strptime(tracking_date_str, '%d.%m.%y %H:%M'))
    except Exception:
        await message.answer(
            text=f'üìÖ<b><i>–í–≤–µ–¥—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ  –î–î.–ú–ú.–ì–ì –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, {datetime.now().strftime("%d.%m.%y %H:%M")})</i></b>\n\n'
                 f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')
    else:
        await state.update_data(tracking_date=date)
        await state.set_state(ParamSearch.update_period_min)

        await message.answer(text=f'‚è∞ <b><i>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥  –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è  –≤ –º–∏–Ω—É—Ç–∞—Ö</i></b>\n\n'
                                  f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break')


async def update_period_min(message: types.Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer(f'<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>')
        await message.delete()

    else:
        await state.update_data(update_period_min=int(message.text))
        await state.update_data(user_id=message.from_user.id)

        data = await state.get_data()
        print(data)

        cars = '–í—ã–±—Ä–∞–Ω–æ' if data.get("cars", False) else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
        truck_cars = '–í—ã–±—Ä–∞–Ω–æ' if data.get("truck_cars", False) else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
        currency = data.get('currency')
        await message.answer(f'<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:</b>\n'
                             f'<i>–í—ã –≤—ã–±—Ä–∞–ª–∏:</i>\n'
                             f'<i>–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ - üöó <b>{cars}</b>\n</i>'
                             f'<i>–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ - üöö <b>{truck_cars}</b>\n</i>'
                             f'<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üíµ {data.get("price_min")} <b>{currency}</b></i>\n'
                             f'<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∏ {data.get("price_max")} <b>{currency}</b></i>\n'
                             f'<i>–ü–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å üìÖ{data.get("tracking_date")}</i>\n'
                             f'<i>–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚è∞ {data.get("update_period_min")} <b>min</b></i>\n\n'
                             f'<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /get \n\n'
                             f'<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /begin\n'
                             f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /break'
                             )

        await add_params(session=session, data=data)
        await state.clear()
